{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class BearerAuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    request = request.clone({\n      setHeaders: {\n        'content-type': 'application/json'\n      }\n    });\n    const token = this.authService.sessionTokenValue();\n    if (token && token != undefined) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function BearerAuthInterceptor_Factory(t) {\n    return new (t || BearerAuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BearerAuthInterceptor,\n    factory: BearerAuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["BearerAuthInterceptor","constructor","authService","intercept","request","next","clone","setHeaders","token","sessionTokenValue","undefined","Authorization","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac"],"sources":["c:\\projects\\personal\\2023\\mlg\\MLGStore_UI\\src\\app\\interceptors\\bearer-auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class BearerAuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  intercept(request: HttpRequest<any>,\r\n    next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    request = request.clone({\r\n      setHeaders: {\r\n        'content-type': 'application/json'\r\n      }\r\n    });\r\n\r\n    const token: string | undefined = this.authService.sessionTokenValue();\r\n    if (token && token != undefined) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      }); \r\n    }\r\n\r\n    return next.handle(request);\r\n\r\n  }\r\n}\r\n"],"mappings":";;AAWA,OAAM,MAAOA,qBAAqB;EAEhCC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAASA,CAACC,OAAyB,EACjCC,IAAiB;IAEjBD,OAAO,GAAGA,OAAO,CAACE,KAAK,CAAC;MACtBC,UAAU,EAAE;QACV,cAAc,EAAE;;KAEnB,CAAC;IAEF,MAAMC,KAAK,GAAuB,IAAI,CAACN,WAAW,CAACO,iBAAiB,EAAE;IACtE,IAAID,KAAK,IAAIA,KAAK,IAAIE,SAAS,EAAE;MAC/BN,OAAO,GAAGA,OAAO,CAACE,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVI,aAAa,EAAE,UAAUH,KAAK;;OAEjC,CAAC;;IAGJ,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAE7B;EAAC,QAAAS,CAAA,G;qBAxBUb,qBAAqB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBlB,qBAAqB;IAAAmB,OAAA,EAArBnB,qBAAqB,CAAAoB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}