{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { environment } from '../../environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class ShoppingCartService {\n  constructor(http, errorService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.apiUrl = `${environment.apiUrlBase}/Article`;\n    this.list = [];\n    this._cartItems = new ReplaySubject(1);\n    this.getAll();\n  }\n  set CartItems(value) {\n    this.list = value;\n    this._cartItems.next(this.list);\n    console.log(`Loaded ${value.length} cart items`);\n  }\n  get CartItems$() {\n    return this._cartItems.asObservable();\n  }\n  addToCart(article) {\n    const uri = `${this.apiUrl}/AddShoppingCartItem`;\n    return this.http.post(uri, {\n      \"articleId\": article.id\n    }).pipe(map(response => {\n      if (response.success) {\n        this.add(article);\n        return true;\n      }\n      this.errorService.logError(response);\n      return false;\n    }));\n  }\n  httpCall() {\n    const uri = `${this.apiUrl}/GetShoppingCartItems`;\n    return this.http.get(uri);\n  }\n  getAll() {\n    this.httpCall().subscribe({\n      next: response => {\n        this.CartItems = response.data;\n      },\n      error: error => {\n        this.CartItems = [];\n        this.errorService.logError(error);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function ShoppingCartService_Factory(t) {\n    return new (t || ShoppingCartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShoppingCartService,\n    factory: ShoppingCartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ReplaySubject","environment","ShoppingCartService","constructor","http","errorService","apiUrl","apiUrlBase","list","_cartItems","getAll","CartItems","value","next","console","log","length","CartItems$","asObservable","addToCart","article","uri","post","id","pipe","map","response","success","add","logError","httpCall","get","subscribe","data","error","_","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","_2","factory","ɵfac","providedIn"],"sources":["c:\\projects\\personal\\2023\\mlg\\MLGStore_UI\\src\\app\\services\\shopping-cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { ArticleDTO } from '../models/article';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ErrorService } from './error.service';\r\nimport { Result } from '../models/result';\r\nimport { environment } from '../../environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShoppingCartService {\r\n\r\n  apiUrl: string = `${environment.apiUrlBase}/Article`;;\r\n\r\n  private _cartItems: ReplaySubject<Array<ArticleDTO>>;\r\n  private list: Array<ArticleDTO> = [];\r\n\r\n  constructor(private http: HttpClient,\r\n    private errorService: ErrorService) {\r\n    this._cartItems = new ReplaySubject<Array<ArticleDTO>>(1);\r\n    this.getAll();\r\n  }\r\n\r\n  set CartItems(value: Array<ArticleDTO>) {\r\n    this.list = value;\r\n    this._cartItems.next(this.list);\r\n    console.log(`Loaded ${value.length} cart items`);\r\n  }\r\n\r\n  get CartItems$(): Observable<Array<ArticleDTO>> {\r\n    return this._cartItems.asObservable();\r\n  }\r\n\r\n  addToCart(article: ArticleDTO): Observable<boolean> {\r\n    const uri = `${this.apiUrl}/AddShoppingCartItem`;\r\n    return this.http.post<Result<boolean>>(uri, {\r\n      \"articleId\": article.id\r\n    }).pipe(map((response: Result<boolean>) => {\r\n        if (response.success) {\r\n          this.add(article);\r\n          return true;\r\n        }\r\n        this.errorService.logError(response);\r\n        return false;\r\n      }));\r\n  }\r\n\r\n  private httpCall(): Observable<Result<Array<ArticleDTO>>> {\r\n    const uri = `${this.apiUrl}/GetShoppingCartItems`;\r\n    return this.http\r\n      .get<Result<Array<ArticleDTO>>>(uri);\r\n  }\r\n\r\n  private getAll() {\r\n    this.httpCall().subscribe({\r\n      next: (response) => {\r\n        this.CartItems = response.data;\r\n      }, error: (error) => {\r\n        this.CartItems = [];\r\n        this.errorService.logError(error);\r\n      }\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,aAAa,QAAQ,MAAM;AAKhD,SAASC,WAAW,QAAQ,mBAAmB;;;;AAK/C,OAAM,MAAOC,mBAAmB;EAO9BC,YAAoBC,IAAgB,EAC1BC,YAA0B;IADhB,KAAAD,IAAI,GAAJA,IAAI;IACd,KAAAC,YAAY,GAAZA,YAAY;IANtB,KAAAC,MAAM,GAAW,GAAGL,WAAW,CAACM,UAAU,UAAU;IAG5C,KAAAC,IAAI,GAAsB,EAAE;IAIlC,IAAI,CAACC,UAAU,GAAG,IAAIT,aAAa,CAAoB,CAAC,CAAC;IACzD,IAAI,CAACU,MAAM,EAAE;EACf;EAEA,IAAIC,SAASA,CAACC,KAAwB;IACpC,IAAI,CAACJ,IAAI,GAAGI,KAAK;IACjB,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,IAAI,CAACL,IAAI,CAAC;IAC/BM,OAAO,CAACC,GAAG,CAAC,UAAUH,KAAK,CAACI,MAAM,aAAa,CAAC;EAClD;EAEA,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACR,UAAU,CAACS,YAAY,EAAE;EACvC;EAEAC,SAASA,CAACC,OAAmB;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,MAAM,sBAAsB;IAChD,OAAO,IAAI,CAACF,IAAI,CAACkB,IAAI,CAAkBD,GAAG,EAAE;MAC1C,WAAW,EAAED,OAAO,CAACG;KACtB,CAAC,CAACC,IAAI,CAACC,GAAG,CAAEC,QAAyB,IAAI;MACtC,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpB,IAAI,CAACC,GAAG,CAACR,OAAO,CAAC;QACjB,OAAO,IAAI;;MAEb,IAAI,CAACf,YAAY,CAACwB,QAAQ,CAACH,QAAQ,CAAC;MACpC,OAAO,KAAK;IACd,CAAC,CAAC,CAAC;EACP;EAEQI,QAAQA,CAAA;IACd,MAAMT,GAAG,GAAG,GAAG,IAAI,CAACf,MAAM,uBAAuB;IACjD,OAAO,IAAI,CAACF,IAAI,CACb2B,GAAG,CAA4BV,GAAG,CAAC;EACxC;EAEQX,MAAMA,CAAA;IACZ,IAAI,CAACoB,QAAQ,EAAE,CAACE,SAAS,CAAC;MACxBnB,IAAI,EAAGa,QAAQ,IAAI;QACjB,IAAI,CAACf,SAAS,GAAGe,QAAQ,CAACO,IAAI;MAChC,CAAC;MAAEC,KAAK,EAAGA,KAAK,IAAI;QAClB,IAAI,CAACvB,SAAS,GAAG,EAAE;QACnB,IAAI,CAACN,YAAY,CAACwB,QAAQ,CAACK,KAAK,CAAC;MACnC;KACD,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBApDUjC,mBAAmB,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBxC,mBAAmB;IAAAyC,OAAA,EAAnBzC,mBAAmB,CAAA0C,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}