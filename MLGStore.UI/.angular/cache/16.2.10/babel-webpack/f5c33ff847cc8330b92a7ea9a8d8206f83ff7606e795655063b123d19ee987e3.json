{"ast":null,"code":"import { environment } from '../../environment';\nimport { ReplaySubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class ArticleService {\n  constructor(http, errorService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.apiUrl = `${environment.apiUrlBase}/Article`;\n    this.list = [];\n    this._articles = new ReplaySubject(1);\n    this.getAll();\n  }\n  set Articles(value) {\n    this.list = value;\n    this._articles.next(this.list);\n    console.log(`Loaded ${value.length} article items`);\n  }\n  get Articles$() {\n    return this._articles.asObservable();\n  }\n  httpCall() {\n    return this.http.get(this.apiUrl);\n  }\n  getAll() {\n    this.httpCall().subscribe({\n      next: response => {\n        alert(JSON.stringify(response.data));\n        this.Articles = response.data;\n      },\n      error: error => {\n        this.Articles = [];\n        this.errorService.logError(error);\n      }\n    });\n  }\n  insert(article) {\n    const uri = `${this.apiUrl}/CreateArticleWithImageUrl`;\n    return this.http.post(uri, article).pipe(map(response => {\n      if (response.success) {\n        this.add(response.data);\n        return response.data;\n      }\n      this.errorService.logError(response);\n      return null;\n    }));\n  }\n  update(id, article) {\n    const uri = `${this.apiUrl}/${id}`;\n    return this.http.put(this.apiUrl, article).pipe(map(response => {\n      if (response.success) {\n        this.edit(response.data);\n        return response.data;\n      }\n      this.errorService.logError(response);\n      return null;\n    }));\n  }\n  delete(id) {\n    const uri = `${this.apiUrl}/${id}`;\n    return this.http.delete(uri).pipe(map(response => {\n      if (response.success) {\n        this.remove(id);\n        return true;\n      }\n      this.errorService.logError(response);\n      return false;\n    }));\n  }\n  add(item) {\n    this.list.unshift(item);\n    this._articles.next(this.list);\n  }\n  edit(item) {\n    const idx = this.list.findIndex(x => x.id === item.id);\n    this.list[idx] = item;\n    this._articles.next(this.list);\n  }\n  remove(id) {\n    const idx = this.list.findIndex(x => x.id === id);\n    this.list.splice(idx, 1);\n    this._articles.next(this.list);\n  }\n  static #_ = this.ɵfac = function ArticleService_Factory(t) {\n    return new (t || ArticleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticleService,\n    factory: ArticleService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","ReplaySubject","map","ArticleService","constructor","http","errorService","apiUrl","apiUrlBase","list","_articles","getAll","Articles","value","next","console","log","length","Articles$","asObservable","httpCall","get","subscribe","response","alert","JSON","stringify","data","error","logError","insert","article","uri","post","pipe","success","add","update","id","put","edit","delete","remove","item","unshift","idx","findIndex","x","splice","_","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","_2","factory","ɵfac","providedIn"],"sources":["c:\\projects\\personal\\2023\\mlg\\MLGStore_UI\\src\\app\\services\\article.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, ReplaySubject, map } from 'rxjs';\r\nimport { ArticleDTO, CreateArticleDTO, CreateArticleWithImageUrlDTO } from '../models/article';\r\nimport { Result } from '../models/result';\r\nimport { ErrorService } from './error.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ArticleService {\r\n\r\n  apiUrl: string = `${environment.apiUrlBase}/Article`;;\r\n\r\n  private _articles: ReplaySubject<Array<ArticleDTO>>;\r\n  private list: Array<ArticleDTO> = [];\r\n\r\n  constructor(private http: HttpClient,\r\n    private errorService: ErrorService) {\r\n    this._articles = new ReplaySubject<Array<ArticleDTO>>(1);\r\n    this.getAll();\r\n  }\r\n\r\n  set Articles(value: Array<ArticleDTO>) {\r\n    this.list = value;\r\n    this._articles.next(this.list);\r\n    console.log(`Loaded ${value.length} article items`);\r\n  }\r\n\r\n  get Articles$(): Observable<Array<ArticleDTO>> {\r\n    return this._articles.asObservable();\r\n  }\r\n\r\n  private httpCall(): Observable<Result<Array<ArticleDTO>>> {\r\n    return this.http\r\n      .get<Result<Array<ArticleDTO>>>(this.apiUrl);\r\n  }\r\n\r\n  private getAll() {\r\n    this.httpCall().subscribe({\r\n      next: (response) => {\r\n        alert(JSON.stringify(response.data))\r\n        this.Articles = response.data;\r\n      }, error: (error) => {\r\n        this.Articles = [];\r\n        this.errorService.logError(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  insert(article: CreateArticleWithImageUrlDTO): Observable<ArticleDTO> {\r\n    const uri = `${this.apiUrl}/CreateArticleWithImageUrl`;\r\n    return this.http.post<Result<ArticleDTO>>(uri, article)\r\n      .pipe(map((response: Result<ArticleDTO>) => {\r\n        if (response.success) {\r\n          this.add(response.data);\r\n          return response.data;\r\n        }\r\n        this.errorService.logError(response);\r\n        return null as any;\r\n      }));\r\n  }\r\n\r\n  update(id: number, article: CreateArticleWithImageUrlDTO): Observable<ArticleDTO> {\r\n    const uri = `${this.apiUrl}/${id}`;\r\n    return this.http.put<Result<ArticleDTO>>(this.apiUrl, article)\r\n      .pipe(map((response: Result<ArticleDTO>) => {\r\n        if (response.success) {\r\n          this.edit(response.data);\r\n          return response.data;\r\n        }\r\n        this.errorService.logError(response);\r\n        return null as any;\r\n      }));\r\n  }\r\n\r\n  delete(id: number): Observable<boolean> {\r\n    const uri = `${this.apiUrl}/${id}`;\r\n    return this.http.delete<Result<boolean>>(uri)\r\n      .pipe(map((response: Result<boolean>) => {\r\n        if (response.success) {\r\n          this.remove(id);\r\n          return true;\r\n        }\r\n        this.errorService.logError(response);\r\n        return false;\r\n      }));\r\n  }\r\n\r\n  private add(item: ArticleDTO) {\r\n    this.list.unshift(item);\r\n    this._articles.next(this.list);\r\n  }\r\n\r\n  private edit(item: ArticleDTO) {\r\n    const idx = this.list.findIndex(x => x.id === item.id);\r\n    this.list[idx] = item;\r\n    this._articles.next(this.list);\r\n  }\r\n\r\n  private remove(id: number) {\r\n    const idx = this.list.findIndex(x => x.id === id);\r\n    this.list.splice(idx, 1);\r\n    this._articles.next(this.list);\r\n  }\r\n\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}