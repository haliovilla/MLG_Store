{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport { environment } from '../../environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class StoreService {\n  constructor(http, errorService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.apiUrl = `${environment.apiUrlBase}/Store`;\n    this.list = [];\n    this._Stores = new ReplaySubject(1);\n    this.getAll();\n  }\n  set Stores(value) {\n    this.list = value;\n    this._Stores.next(this.list);\n    console.log(`Loaded ${value.length} store items`);\n  }\n  get Stores$() {\n    return this._Stores.asObservable();\n  }\n  httpCall() {\n    return this.http.get(this.apiUrl);\n  }\n  getAll() {\n    this.httpCall().subscribe({\n      next: response => {\n        this.Stores = response.data;\n      },\n      error: error => {\n        this.Stores = [];\n        this.errorService.logError(error);\n      }\n    });\n  }\n  insert(store) {\n    return this.http.post(this.apiUrl, store).pipe(map(response => {\n      if (response.success) {\n        this.add(response.data);\n        return response.data;\n      }\n      this.errorService.logError(response);\n      return null;\n    }));\n  }\n  update(id, store) {\n    const uri = `${this.apiUrl}/${id}`;\n    return this.http.put(uri, store).pipe(map(response => {\n      if (response.success) {\n        this.edit(response.data);\n        return response.data;\n      }\n      this.errorService.logError(response);\n      return null;\n    }));\n  }\n  delete(id) {\n    const uri = `${this.apiUrl}/${id}`;\n    return this.http.delete(uri).pipe(map(response => {\n      if (response.success) {\n        this.remove(id);\n        return true;\n      }\n      this.errorService.logError(response);\n      return false;\n    }));\n  }\n  add(item) {\n    this.list.unshift(item);\n    this._Stores.next(this.list);\n  }\n  edit(item) {\n    const idx = this.list.findIndex(x => x.id === item.id);\n    this.list[idx] = item;\n    this._Stores.next(this.list);\n  }\n  remove(id) {\n    const idx = this.list.findIndex(x => x.id === id);\n    this.list.splice(idx, 1);\n    this._Stores.next(this.list);\n  }\n  static #_ = this.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ReplaySubject","map","environment","StoreService","constructor","http","errorService","apiUrl","apiUrlBase","list","_Stores","getAll","Stores","value","next","console","log","length","Stores$","asObservable","httpCall","get","subscribe","response","data","error","logError","insert","store","post","pipe","success","add","update","id","uri","put","edit","delete","remove","item","unshift","idx","findIndex","x","splice","_","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","_2","factory","ɵfac","providedIn"],"sources":["c:\\projects\\personal\\2023\\mlg\\MLGStore_UI\\src\\app\\services\\store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject, map } from 'rxjs';\r\nimport { CreateStoreDTO, StoreDTO } from '../models/Store';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ErrorService } from './error.service';\r\nimport { environment } from '../../environment';\r\nimport { Result } from '../models/result';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StoreService {\r\n\r\n  apiUrl: string = `${environment.apiUrlBase}/Store`;;\r\n\r\n  private _Stores: ReplaySubject<Array<StoreDTO>>;\r\n  private list: Array<StoreDTO> = [];\r\n\r\n  constructor(private http: HttpClient,\r\n    private errorService: ErrorService) {\r\n    this._Stores = new ReplaySubject<Array<StoreDTO>>(1);\r\n    this.getAll();\r\n  }\r\n\r\n  set Stores(value: Array<StoreDTO>) {\r\n    this.list = value;\r\n    this._Stores.next(this.list);\r\n    console.log(`Loaded ${value.length} store items`);\r\n  }\r\n\r\n  get Stores$(): Observable<Array<StoreDTO>> {\r\n    return this._Stores.asObservable();\r\n  }\r\n\r\n  private httpCall(): Observable<Result<Array<StoreDTO>>> {\r\n    return this.http\r\n      .get<Result<Array<StoreDTO>>>(this.apiUrl);\r\n  }\r\n\r\n  private getAll() {\r\n    this.httpCall().subscribe({\r\n      next: (response) => {\r\n        this.Stores = response.data;\r\n      }, error: (error) => {\r\n        this.Stores = [];\r\n        this.errorService.logError(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  insert(store: CreateStoreDTO): Observable<StoreDTO> {\r\n    return this.http.post<Result<StoreDTO>>(this.apiUrl, store)\r\n      .pipe(map((response: Result<StoreDTO>) => {\r\n        if (response.success) {\r\n          this.add(response.data);\r\n          return response.data;\r\n        }\r\n        this.errorService.logError(response);\r\n        return null as any;\r\n      }));\r\n  }\r\n\r\n  update(id: number, store: CreateStoreDTO): Observable<StoreDTO> {\r\n    const uri = `${this.apiUrl}/${id}`;\r\n    return this.http.put<Result<StoreDTO>>(uri, store)\r\n      .pipe(map((response: Result<StoreDTO>) => {\r\n        if (response.success) {\r\n          this.edit(response.data);\r\n          return response.data;\r\n        }\r\n        this.errorService.logError(response);\r\n        return null as any;\r\n      }));\r\n  }\r\n\r\n  delete(id: number): Observable<boolean> {\r\n    const uri = `${this.apiUrl}/${id}`;\r\n    return this.http.delete<Result<boolean>>(uri)\r\n      .pipe(map((response: Result<boolean>) => {\r\n        if (response.success) {\r\n          this.remove(id);\r\n          return true;\r\n        }\r\n        this.errorService.logError(response);\r\n        return false;\r\n      }));\r\n  }\r\n\r\n  private add(item: StoreDTO) {\r\n    this.list.unshift(item);\r\n    this._Stores.next(this.list);\r\n  }\r\n\r\n  private edit(item: StoreDTO) {\r\n    const idx = this.list.findIndex(x => x.id === item.id);\r\n    this.list[idx] = item;\r\n    this._Stores.next(this.list);\r\n  }\r\n\r\n  private remove(id: number) {\r\n    const idx = this.list.findIndex(x => x.id === id);\r\n    this.list.splice(idx, 1);\r\n    this._Stores.next(this.list);\r\n  }\r\n\r\n\r\n\r\n}\r\n"],"mappings":"AACA,SAAqBA,aAAa,EAAEC,GAAG,QAAQ,MAAM;AAIrD,SAASC,WAAW,QAAQ,mBAAmB;;;;AAM/C,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,IAAgB,EAC1BC,YAA0B;IADhB,KAAAD,IAAI,GAAJA,IAAI;IACd,KAAAC,YAAY,GAAZA,YAAY;IANtB,KAAAC,MAAM,GAAW,GAAGL,WAAW,CAACM,UAAU,QAAQ;IAG1C,KAAAC,IAAI,GAAoB,EAAE;IAIhC,IAAI,CAACC,OAAO,GAAG,IAAIV,aAAa,CAAkB,CAAC,CAAC;IACpD,IAAI,CAACW,MAAM,EAAE;EACf;EAEA,IAAIC,MAAMA,CAACC,KAAsB;IAC/B,IAAI,CAACJ,IAAI,GAAGI,KAAK;IACjB,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,IAAI,CAACL,IAAI,CAAC;IAC5BM,OAAO,CAACC,GAAG,CAAC,UAAUH,KAAK,CAACI,MAAM,cAAc,CAAC;EACnD;EAEA,IAAIC,OAAOA,CAAA;IACT,OAAO,IAAI,CAACR,OAAO,CAACS,YAAY,EAAE;EACpC;EAEQC,QAAQA,CAAA;IACd,OAAO,IAAI,CAACf,IAAI,CACbgB,GAAG,CAA0B,IAAI,CAACd,MAAM,CAAC;EAC9C;EAEQI,MAAMA,CAAA;IACZ,IAAI,CAACS,QAAQ,EAAE,CAACE,SAAS,CAAC;MACxBR,IAAI,EAAGS,QAAQ,IAAI;QACjB,IAAI,CAACX,MAAM,GAAGW,QAAQ,CAACC,IAAI;MAC7B,CAAC;MAAEC,KAAK,EAAGA,KAAK,IAAI;QAClB,IAAI,CAACb,MAAM,GAAG,EAAE;QAChB,IAAI,CAACN,YAAY,CAACoB,QAAQ,CAACD,KAAK,CAAC;MACnC;KACD,CAAC;EACJ;EAEAE,MAAMA,CAACC,KAAqB;IAC1B,OAAO,IAAI,CAACvB,IAAI,CAACwB,IAAI,CAAmB,IAAI,CAACtB,MAAM,EAAEqB,KAAK,CAAC,CACxDE,IAAI,CAAC7B,GAAG,CAAEsB,QAA0B,IAAI;MACvC,IAAIA,QAAQ,CAACQ,OAAO,EAAE;QACpB,IAAI,CAACC,GAAG,CAACT,QAAQ,CAACC,IAAI,CAAC;QACvB,OAAOD,QAAQ,CAACC,IAAI;;MAEtB,IAAI,CAAClB,YAAY,CAACoB,QAAQ,CAACH,QAAQ,CAAC;MACpC,OAAO,IAAW;IACpB,CAAC,CAAC,CAAC;EACP;EAEAU,MAAMA,CAACC,EAAU,EAAEN,KAAqB;IACtC,MAAMO,GAAG,GAAG,GAAG,IAAI,CAAC5B,MAAM,IAAI2B,EAAE,EAAE;IAClC,OAAO,IAAI,CAAC7B,IAAI,CAAC+B,GAAG,CAAmBD,GAAG,EAAEP,KAAK,CAAC,CAC/CE,IAAI,CAAC7B,GAAG,CAAEsB,QAA0B,IAAI;MACvC,IAAIA,QAAQ,CAACQ,OAAO,EAAE;QACpB,IAAI,CAACM,IAAI,CAACd,QAAQ,CAACC,IAAI,CAAC;QACxB,OAAOD,QAAQ,CAACC,IAAI;;MAEtB,IAAI,CAAClB,YAAY,CAACoB,QAAQ,CAACH,QAAQ,CAAC;MACpC,OAAO,IAAW;IACpB,CAAC,CAAC,CAAC;EACP;EAEAe,MAAMA,CAACJ,EAAU;IACf,MAAMC,GAAG,GAAG,GAAG,IAAI,CAAC5B,MAAM,IAAI2B,EAAE,EAAE;IAClC,OAAO,IAAI,CAAC7B,IAAI,CAACiC,MAAM,CAAkBH,GAAG,CAAC,CAC1CL,IAAI,CAAC7B,GAAG,CAAEsB,QAAyB,IAAI;MACtC,IAAIA,QAAQ,CAACQ,OAAO,EAAE;QACpB,IAAI,CAACQ,MAAM,CAACL,EAAE,CAAC;QACf,OAAO,IAAI;;MAEb,IAAI,CAAC5B,YAAY,CAACoB,QAAQ,CAACH,QAAQ,CAAC;MACpC,OAAO,KAAK;IACd,CAAC,CAAC,CAAC;EACP;EAEQS,GAAGA,CAACQ,IAAc;IACxB,IAAI,CAAC/B,IAAI,CAACgC,OAAO,CAACD,IAAI,CAAC;IACvB,IAAI,CAAC9B,OAAO,CAACI,IAAI,CAAC,IAAI,CAACL,IAAI,CAAC;EAC9B;EAEQ4B,IAAIA,CAACG,IAAc;IACzB,MAAME,GAAG,GAAG,IAAI,CAACjC,IAAI,CAACkC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKM,IAAI,CAACN,EAAE,CAAC;IACtD,IAAI,CAACzB,IAAI,CAACiC,GAAG,CAAC,GAAGF,IAAI;IACrB,IAAI,CAAC9B,OAAO,CAACI,IAAI,CAAC,IAAI,CAACL,IAAI,CAAC;EAC9B;EAEQ8B,MAAMA,CAACL,EAAU;IACvB,MAAMQ,GAAG,GAAG,IAAI,CAACjC,IAAI,CAACkC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKA,EAAE,CAAC;IACjD,IAAI,CAACzB,IAAI,CAACoC,MAAM,CAACH,GAAG,EAAE,CAAC,CAAC;IACxB,IAAI,CAAChC,OAAO,CAACI,IAAI,CAAC,IAAI,CAACL,IAAI,CAAC;EAC9B;EAAC,QAAAqC,CAAA,G;qBA5FU3C,YAAY,EAAA4C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZlD,YAAY;IAAAmD,OAAA,EAAZnD,YAAY,CAAAoD,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}